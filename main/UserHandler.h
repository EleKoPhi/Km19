#pragma once
#ifndef UserHandler_h
#define UserHandler_h

#include "FileIO.h"
#include "Helper.h"
#ifdef ARDUINO
#include <SPI.h>
#include <MFRC522.h>
#include <Wire.h>
#include <RTClib.h>
#endif

#include <string>
#include <vector>
#include <map>
using namespace std;

#ifndef ARDUINO
const string TestFolder = "C:\\src\\Arduino\\Km19\\HttpWindowsTest\\Debug\\";
#else
const string TestFolder = "";
#endif

class User
{
public:
	string cardId;
	string name;
	bool isAllowed;
	string toString() { return cardId + ":'" + name + "' allowed=" + to_string(isAllowed); }
};

string padLeft(string text, int length = 2, char padding = ' ');
string padLeft(int value, int length = 2, char padding = '0');

class TimeStamp
{
	TimeStamp(int year, int month, int day, int hours, int minutes, int seconds);
#ifndef ARDUINO
	TimeStamp(tm* timestamp);
#else
	TimeStamp(DateTime& tm);
#endif
public:
	~TimeStamp() {}
	static TimeStamp now();
	// parses a timestamp generated by getTimestamp()
	static TimeStamp parse(string timestamp);

	// year 1900...
	int year;
	// month [1..12]
	int month;
	// day [1..31]
	int day;
	// [0..23]
	int hours;
	// [0..59]
	int minutes;
	// [0..59]
	int seconds;
	// timestamp formated: yyyy-MM-dd_HH-mm-ss
	string getTimestamp();
	// date formated: yyyy-MM-dd
	string getDate();
	// time formated: HH:mm:ss
	string getTime();
	// date and time formated: yyyy-MM-dd HH:mm:ss
	string getDateTime();
};

enum LogEntryType : char
{
	None = 0,
	Single = 1,
	Double = 2,
};

class LogEntry
{
public:
	LogEntry() : timestamp(TimeStamp::now()) {}
	LogEntry(const TimeStamp & timestamp, const string& cardId, const LogEntryType type) : timestamp(timestamp), cardId(cardId), type(type) {}
	~LogEntry() {}
	TimeStamp timestamp;
	string cardId;
	LogEntryType type;
	string toString() { return timestamp.getDateTime() + "->" + cardId + ", type=" + to_string(type); }
	static string csvHeader();
	string toCsv(string username = "");
	static string stdCardId(const string& cardId);
};

const static string UserFile = "users.csv";
const static string LogFile = "log.csv";
const static string ConfigFile = "config.csv";

class Parameter
{
public:
	Parameter(const string& name, const string& value) : name(name), value(value) {}
	~Parameter() {}
	string name;
	string value;
};

class UserHandler
{
	UserHandler();
	~UserHandler();
	void log(string str)
	{
	#ifndef ARDUINO
		printf((str + "\n").c_str());
	#else
		Serial.println(str.c_str());
	#endif
	}
#ifndef ARDUINO
#else
	SdFat _userData;
	SdFat _logFile;
#endif

	string writeLogLine(TimeStamp& timestamp, const string& cardId, LogEntryType entry);
public:

	static UserHandler* getInstance();

	std::map<string, User> readUsers();
	string readCurrentCardId();
	string checkUser(const string& cardId);
	void setUser(const string& cardId, const string& name, bool isAllowed = true);
	static const string UnknownUser;
	void getUserStatistics(int& number, int& numberBlocked, int& numberUnnamed);

	void writeLog(const string& cardId, LogEntryType entry = LogEntryType::None);
	vector<LogEntry> readLog(unsigned int maximum = 10, string filename = "");
	int numberOfLogEntries();
	vector<string> getOldLogFiles();
	const int logEntryLength = 43;

	void setParameter(const string& name, const string & value);
	void setParameter(const string& name, const double  value);
	string getParameter(const string& name);
	double getParameterD(const string& name);
	vector<Parameter> getParameters();

	MillStates readButtonChoice();
	bool isCardAvailable();

	bool SdStatus;
	bool NfcStatus;
	bool RtcStatus;
	static DS3231* realTimeClock()
	{
		static DS3231 rtc;
		getInstance()->RtcStatus = rtc.begin();
		return &rtc;
	}
	static void sdCard()
	{
		getInstance()->SdStatus = FileIOBase::sdCard();
	}
	static MFRC522* nfcReader()
	{
		static MFRC522 nfc;
		nfc.PCD_Init();
		getInstance()->NfcStatus = nfc.PCD_PerformSelfTest();
		nfc.PCD_Init();
		return &nfc;
	}

};

#endif
