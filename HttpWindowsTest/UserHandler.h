#pragma once
#include <string>
#include <vector>
#include <map>
using namespace std;
//using String = std::string;

#ifndef ARDUINO
const string TestFolder = "C:\\src\\Arduino\\Km19\\HttpWindowsTest\\Debug\\";
#endif

class User
{
public:
	string cardId;
	string name;
	bool isAllowed;
	string toString() { return cardId + ":'" + name + "' allowed=" + to_string(isAllowed); }
};

string padLeft(string text, int length = 2, char padding = ' ');
string padLeft(int value, int length = 2, char padding = '0');

class TimeStamp
{
	TimeStamp(int year, int month, int day, int hours, int minutes, int seconds);
	TimeStamp(tm* timestamp);
public:
	~TimeStamp() {}
	static TimeStamp now();
	// parses a timestamp generated by getTimestamp()
	static TimeStamp parse(string timestamp);

	// year 1900...
	int year;
	// month [1..12]
	int month;
	// day [1..31]
	int day;
	// [0..23]
	int hours;
	// [0..59]
	int minutes;
	// [0..59]
	int seconds;
	// timestamp formated: yyyy-MM-dd_HH-mm-ss
	string getTimestamp();
	// date formated: yyyy-MM-dd
	string getDate();
	// time formated: HH:mm:ss
	string getTime();
	// date and time formated: yyyy-MM-dd HH:mm:ss
	string getDateTime();
};

enum LogEntryType : char
{
	None = 0,
	Single = 1,
	Double = 2,
};

class LogEntry
{
public:
	LogEntry() : timestamp(TimeStamp::now()) {}
	LogEntry(const TimeStamp & timestamp, const string& cardId, const LogEntryType type) : timestamp(timestamp), cardId(cardId), type(type) {}
	~LogEntry() {}
	TimeStamp timestamp;
	string cardId;
	LogEntryType type;
	string toString() { return timestamp.getDateTime() + "->" + cardId + ", type=" + to_string(type); }
	static string csvHeader();
	string toCsv(string username = "");
	static string stdCardId(const string& cardId);
};

const static string UserFile = "users.csv";
const static string LogFile = "log.csv";
const static string ConfigFile = "config.csv";

class Parameter
{
public:
	Parameter(const string& name, const string& value) : name(name), value(value) {}
	~Parameter() {}
	string name;
	string value;
};

class UserHandler
{
	UserHandler();
	~UserHandler();
	void log(string str) { printf((str + "\n").c_str()); }

	string writeLogLine(TimeStamp& timestamp, const string& cardId, LogEntryType entry);
public:

	static UserHandler* getInstance();

	map<string, User> readUsers();
	string checkUser(const string& cardId);
	void setUser(const string& cardId, const string& name, bool isAllowed = true);
	const string UnknownUser = "unkonwn";

	void writeLog(const string& cardId, LogEntryType entry = LogEntryType::None);
	vector<LogEntry> readLog(unsigned int maximum = 10, string filename = "");
	int numberOfLogEntries();
	vector<string> getOldLogFiles();
	const int logEntryLength = 43;

	void setParameter(const string& name, const string & value);
	void setParameter(const string& name, const double  value);
	string getParameter(const string& name);
	double getParameterD(const string& name);
	vector<Parameter> getParameters();
};

